local TweenService = game:GetService("TweenService");
local RunService = game:GetService("RunService");
local TextService = game:GetService("TextService");

local Player = game:GetService("Players").LocalPlayer;

local NotifGui = Instance.new("ScreenGui");
NotifGui.Name = "FlatNotif";
NotifGui.Parent = RunService:IsStudio() and Player:WaitForChild("PlayerGui") or game:GetService("CoreGui");

local Container = Instance.new("Frame");
Container.Name = "Container";
Container.AnchorPoint = Vector2.new(1, 1);
Container.Position = UDim2.new(1, -20, 1, -20);
Container.Size = UDim2.new(0, 300, 0, 0);
Container.BackgroundTransparency = 1;
Container.Parent = NotifGui;

local Padding = 10;
local NotifGap = 40;
local InstructionObjects = {};
local TweenTime = 1;
local TweenStyle = Enum.EasingStyle.Sine;
local TweenDirection = Enum.EasingDirection.Out;
local LastTick = tick();

local function Label(text)
	local lbl = Instance.new("TextLabel");
	lbl.Text = text;
	lbl.Font = Enum.Font.Code;
	lbl.TextSize = 19;
	lbl.BackgroundTransparency = 1;
	lbl.TextXAlignment = Enum.TextXAlignment.Center;
	lbl.TextYAlignment = Enum.TextYAlignment.Center;
	lbl.TextColor3 = Color3.fromRGB(255, 255, 255);
	lbl.Size = UDim2.new(1, -20, 1, -13);
	lbl.Position = UDim2.fromOffset(10, 5);
	return lbl;
end

local function Update()
	local delta = tick() - LastTick;
	local totalY = 0;

	for _, obj in ipairs(InstructionObjects) do
		local Frame, elapsed, done = obj[1], obj[2], obj[3];

		if not done then
			obj[2] = math.clamp(elapsed + delta, 0, TweenTime);
			if obj[2] >= TweenTime then obj[3] = true end
		end

		local alpha = TweenService:GetValue(obj[2], TweenStyle, TweenDirection);
		local targetY = -(totalY + Padding);
		Frame.Position = Frame.Position:Lerp(UDim2.new(1, 0, 1, targetY), alpha);

		totalY += Frame.Size.Y.Offset + Padding;
	end

	LastTick = tick();
end

RunService:BindToRenderStep("FlatNotifyUpdate", Enum.RenderPriority.Last.Value, Update);

local function FadeProperty(obj, prop)
	TweenService:Create(obj, TweenInfo.new(0.25, TweenStyle, TweenDirection), {
		[prop] = 1
	}):Play();
end

local function FadeOutAfter(Frame, Time)
	task.wait(Time);
	FadeProperty(Frame, "BackgroundTransparency");
	for _, obj in ipairs(Frame:GetDescendants()) do
		if obj:IsA("TextLabel") then
			FadeProperty(obj, "TextTransparency");
		elseif obj:IsA("Frame") then
			FadeProperty(obj, "BackgroundTransparency");
		end
	end
	task.wait(0.25);
	for i, v in ipairs(InstructionObjects) do
		if v[1] == Frame then
			table.remove(InstructionObjects, i);
			break;
		end
	end
end

return {
	Notify = function(props)
		local message = props.Description or props.Text or "Notification";
		local duration = props.Duration or 4;

		local bounds = TextService:GetTextSize(message, 19, Enum.Font.Code, Vector2.new(Container.AbsoluteSize.X - 20, math.huge));
		local frame = Instance.new("Frame");
		frame.BackgroundColor3 = Color3.fromRGB(12, 12, 12);
		frame.Size = UDim2.new(0, bounds.X + 20, 0, bounds.Y + 13);
		frame.AnchorPoint = Vector2.new(1, 1);
		frame.Position = UDim2.new(1, 0, 1, -10);
		frame.BorderSizePixel = 0;
		frame.BackgroundTransparency = 0;
		frame.Parent = Container;

		local textLabel = Label(message);
		textLabel.Parent = frame;

		local progressBar = Instance.new("Frame");
		progressBar.Size = UDim2.new(1, 0, 0, 3);
		progressBar.Position = UDim2.new(0, 0, 1, -3);
		progressBar.BackgroundColor3 = Color3.fromRGB(86, 180, 211);
		progressBar.BorderSizePixel = 0;
		progressBar.Parent = frame;

		TweenService:Create(progressBar, TweenInfo.new(duration, Enum.EasingStyle.Linear), {
			Size = UDim2.new(0, 0, 0, 3)
		}):Play();

		table.insert(InstructionObjects, {frame, 0, false});
		coroutine.wrap(FadeOutAfter)(frame, duration);
	end
}
